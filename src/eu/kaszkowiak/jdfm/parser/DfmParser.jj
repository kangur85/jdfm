options {

  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = true;
  STATIC = false;
  JDK_VERSION = "1.5";
  BUILD_PARSER = true;
}

PARSER_BEGIN(DfmParser)

/*
 * The MIT License
 *
 * Copyright 2014 Krzysztof Kaszkowiak.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package eu.kaszkowiak.jdfm.parser;

import java.io.Reader;
import java.io.StringReader;
import eu.kaszkowiak.jdfm.model.*;

public class DfmParser {

     public DfmParser(String source) {
        this((Reader)(new StringReader(source)));
    }
}
PARSER_END(DfmParser)

MORE : { < "'" >  : IN_STRING_SQ }
<IN_STRING_SQ> MORE : { < "\\" ["'", "\\"] >  }
<IN_STRING_SQ> MORE : { < ~["'"] >  }
<IN_STRING_SQ> TOKEN : { < STRING_SQ : "'" >  : DEFAULT }

SKIP :
{
    <WHITESPACE :  ([" ", "\t"])+>
}

TOKEN:
{
        <OBJECT: "object">
    |   <ITEM: "item">
    |   <END: "end">
    |   <IDENTIFIER : (["A"-"Z", "0"-"9", "a"-"z", "_", ".", "-"])+ >
    |   <HASH_STRING : ("#" (["0"-"9"])+)+>
    |   <ENDLINE: (["\r", "\n"])+>
    |   <EQUAL: "=">
    |   <COLON: ":">
    |   <CROC_PAREN_L: "<">
    |   <CROC_PAREN_R: ">">
    |   <PAREN_L: "(">
    |   <PAREN_R: ")">
    |   <CURLY_BRACKET_L: "{">
    |   <CURLY_BRACKET_R: "}">
    |   <BRACKET_L: "[">
    |   <BRACKET_R: "]">
    |   <PLUS_SIGN: "+">
    |   <COMMA: ",">
}

DfmObject parse():
{
    DfmObject res;
}
{
    res=dfmObject()
    ( <ENDLINE> )*
    <EOF>
    { return res; }
}

private DfmObject dfmObject():
{
    DfmObject res = new DfmObject();
    DfmProperty prop;
    DfmObject obj;
    Token tName;
    Token tType;
}
{
    <OBJECT>
    tName = <IDENTIFIER>  { res.setName(tName.image); }
    <COLON>
    tType = <IDENTIFIER>  { res.setType(tType.image); }
    <ENDLINE>
    (prop = property()    { res.addProperty(prop); } )*
    ( obj = dfmObject()   { res.addChild(obj);     } (<ENDLINE>)*)*
    <END>
    { return res; }
}

private DfmItem item():
{
    DfmItem res = new DfmItem();
    DfmProperty prop;
}
{
    <ITEM> <ENDLINE>
    (prop = property()    { res.addProperty(prop); } )+
    <END>
    { return res; }
}

private DfmProperty property():
{
    Token tProperty;
    Object propertyValue;
    DfmProperty result = new DfmProperty();
}
{
    tProperty = <IDENTIFIER> { result.setName(tProperty.image); }
    <EQUAL>
        (     (propertyValue = dfmString()              )
            | (propertyValue = multiLineString()        )
            | (propertyValue = itemList()               )
            | (propertyValue = optionsList()            )
            | (propertyValue = list()                   )
            | (propertyValue = byteArray()              )
            | (propertyValue = simpleValue()            )
        ) <ENDLINE>
        {
            result.setValue(propertyValue);
            return result;
        }
}

private DfmList list():
{
    DfmList res = new DfmList();
    String listElem;
}
{
    <PAREN_L> <ENDLINE>
    listElem = listElem() { res.addElem(listElem); }
    ( <ENDLINE> listElem = listElem() { res.addElem(listElem); } )*
    <PAREN_R>
    {
        return res;
    }
}

private String listElem():
{
    Token tIdentifier;
    String res;
}
{
    (
      tIdentifier = <IDENTIFIER> { res = tIdentifier.image; }
    | res = dfmString()
    )
    {
        return res;
    }
}

private DfmMultiLineString multiLineString():
{
    DfmMultiLineString res = new DfmMultiLineString();
    String line;
}
{
    <ENDLINE>
    line = dfmString() { res.addLine(line); }
    ( <PLUS_SIGN> <ENDLINE> line = dfmString() { res.addLine(line); })*
    {
        return res;
    }
}

private DfmOptionsList optionsList():
{
    DfmOptionsList res = new DfmOptionsList();
    String option;
}
{
    (
        <BRACKET_L>
            (
                option = listElem() { res.addOption(option); }
                (<COMMA> option = listElem() { res.addOption(option); })*
            )?
        <BRACKET_R>
    )
    {
        return res;
    }
}

private String simpleValue():
{
    Token tStr;
}
{
    (
        tStr = <IDENTIFIER>
    )
    {
        return tStr.image;
    }
}

private DfmItemList itemList():
{
    DfmItemList result = new DfmItemList();
    DfmItem dfmItem;
}
{
    <CROC_PAREN_L>
    ( <ENDLINE>
      dfmItem = item() { result.add(dfmItem); }
    )*
    <CROC_PAREN_R>
    {
        return result;
    }
}

private String dfmString():
{
    Token tStr;
    String resValue = "";
}
{
    ((
            (tStr = <STRING_SQ>)
          | (tStr = <HASH_STRING>)
    ){ resValue += tStr.image; })+
    {
        return resValue;
    }
}

private DfmByteArray byteArray():
{
    Token tStr;
    DfmByteArray res = new DfmByteArray();
    String stringValue = "";
}
{
    <CURLY_BRACKET_L> <ENDLINE>
    tStr=<IDENTIFIER> { stringValue = tStr.image; }
    (<ENDLINE> tStr=<IDENTIFIER> { stringValue += tStr.image; })+
    <CURLY_BRACKET_R>
    {
        res.parseString(stringValue);
        return res;
    }
}
