/* Generated By:JavaCC: Do not edit this line. DfmParser.java */
/*
 * The MIT License
 *
 * Copyright 2014 Krzysztof Kaszkowiak.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package eu.kaszkowiak.jdfm.parser;

import java.io.Reader;
import java.io.StringReader;
import eu.kaszkowiak.jdfm.model.*;

public class DfmParser implements DfmParserConstants {

     public DfmParser(String source) {
        this((Reader)(new StringReader(source)));
    }

  final public DfmObject parse() throws ParseException {
    DfmObject res;
    res = dfmObject();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDLINE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(ENDLINE);
    }
    jj_consume_token(0);
      {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final private DfmObject dfmObject() throws ParseException {
    DfmObject res = new DfmObject();
    DfmProperty prop;
    DfmObject obj;
    Token tName;
    Token tType;
    jj_consume_token(OBJECT);
    tName = jj_consume_token(IDENTIFIER);
                            res.setName(tName.image);
    jj_consume_token(COLON);
    tType = jj_consume_token(IDENTIFIER);
                            res.setType(tType.image);
    jj_consume_token(ENDLINE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      prop = property();
                            res.addProperty(prop);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      obj = dfmObject();
                            res.addChild(obj);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENDLINE:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        jj_consume_token(ENDLINE);
      }
    }
    jj_consume_token(END);
      {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final private DfmItem item() throws ParseException {
    DfmItem res = new DfmItem();
    DfmProperty prop;
    jj_consume_token(ITEM);
    jj_consume_token(ENDLINE);
    label_5:
    while (true) {
      prop = property();
                            res.addProperty(prop);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
    }
    jj_consume_token(END);
      {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final private DfmProperty property() throws ParseException {
    Token tProperty;
    Object propertyValue;
    DfmProperty result = new DfmProperty();
    tProperty = jj_consume_token(IDENTIFIER);
                               result.setName(tProperty.image);
    jj_consume_token(EQUAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_SQ:
    case HASH_STRING:
      propertyValue = dfmString();
      break;
    case ENDLINE:
      propertyValue = multiLineString();
      break;
    case CROC_PAREN_L:
      propertyValue = itemList();
      break;
    case BRACKET_L:
      propertyValue = optionsList();
      break;
    case PAREN_L:
      propertyValue = list();
      break;
    case CURLY_BRACKET_L:
      propertyValue = byteArray();
      break;
    case IDENTIFIER:
      propertyValue = simpleValue();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ENDLINE);
            result.setValue(propertyValue);
            {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final private DfmList list() throws ParseException {
    DfmList res = new DfmList();
    String listElem;
    jj_consume_token(PAREN_L);
    jj_consume_token(ENDLINE);
    listElem = listElem();
                            res.addElem(listElem);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDLINE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      jj_consume_token(ENDLINE);
      listElem = listElem();
                                        res.addElem(listElem);
    }
    jj_consume_token(PAREN_R);
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final private String listElem() throws ParseException {
    Token tIdentifier;
    String res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      tIdentifier = jj_consume_token(IDENTIFIER);
                                   res = tIdentifier.image;
      break;
    case STRING_SQ:
    case HASH_STRING:
      res = dfmString();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final private DfmMultiLineString multiLineString() throws ParseException {
    DfmMultiLineString res = new DfmMultiLineString();
    String line;
    jj_consume_token(ENDLINE);
    line = dfmString();
                         res.addLine(line);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_7;
      }
      jj_consume_token(PLUS_SIGN);
      jj_consume_token(ENDLINE);
      line = dfmString();
                                                 res.addLine(line);
    }
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final private DfmOptionsList optionsList() throws ParseException {
    DfmOptionsList res = new DfmOptionsList();
    String option;
    jj_consume_token(BRACKET_L);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_SQ:
    case IDENTIFIER:
    case HASH_STRING:
      option = listElem();
                                      res.addOption(option);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        option = listElem();
                                               res.addOption(option);
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(BRACKET_R);
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final private String simpleValue() throws ParseException {
    Token tStr;
    tStr = jj_consume_token(IDENTIFIER);
        {if (true) return tStr.image;}
    throw new Error("Missing return statement in function");
  }

  final private DfmItemList itemList() throws ParseException {
    DfmItemList result = new DfmItemList();
    DfmItem dfmItem;
    jj_consume_token(CROC_PAREN_L);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDLINE:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_9;
      }
      jj_consume_token(ENDLINE);
      dfmItem = item();
                         result.add(dfmItem);
    }
    jj_consume_token(CROC_PAREN_R);
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final private String dfmString() throws ParseException {
    Token tStr;
    String resValue = "";
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_SQ:
        tStr = jj_consume_token(STRING_SQ);
        break;
      case HASH_STRING:
        tStr = jj_consume_token(HASH_STRING);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       resValue += tStr.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_SQ:
      case HASH_STRING:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_10;
      }
    }
        {if (true) return resValue;}
    throw new Error("Missing return statement in function");
  }

  final private DfmByteArray byteArray() throws ParseException {
    Token tStr;
    DfmByteArray res = new DfmByteArray();
    String stringValue = "";
    jj_consume_token(CURLY_BRACKET_L);
    jj_consume_token(ENDLINE);
    tStr = jj_consume_token(IDENTIFIER);
                        stringValue = tStr.image;
    label_11:
    while (true) {
      jj_consume_token(ENDLINE);
      tStr = jj_consume_token(IDENTIFIER);
                                   stringValue += tStr.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDLINE:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_11;
      }
    }
    jj_consume_token(CURLY_BRACKET_R);
        res.parseString(stringValue);
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public DfmParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x200,0x40,0x800,0x200,0x154e10,0x800,0x610,0x400000,0x800000,0x610,0x800,0x410,0x410,0x800,};
   }

  /** Constructor with InputStream. */
  public DfmParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DfmParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DfmParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DfmParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new DfmParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DfmParser(DfmParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DfmParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
